name: Build and Publish Docker Image to ECR

on:
  push:
    branches:
      - uat

jobs:
  # bump-version:
  #   runs-on: ubuntu-latest
  #   if: github.repository == 'Techlabs-do/seekinvest-backend'
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Set up Git
  #       run: |
  #         git config --global user.name "ibad siddiqui"
  #         git config --global user.email "ibadsiddiqui01@outlook.com"

  #     - name: Version bump
  #       run: |
  #         npm version patch -m "Version bump to %s"
  #         git push --follow-tags https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }} HEAD:dev
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.repository == 'Paceapp-io/pace-backend'
    env:
      IMAGE_NAME: pace_dev_repository

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_DEPLOYMENT_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEPLOYMENT_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          file_name: '.env.uat.local'
          envkey_ENVIRONMENT: uat

          # AWS Config
          envkey_AWS_REGION: ${{ secrets.AWS_REGION }}
          # envkey_AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_BUCKET_NAME }}
          # envkey_AWS_BUCKET_ENDPOINT: ${{ secrets.AWS_DEV_BUCKET_ENDPOINT }}
          # envkey_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_STORAGE_ACCESS_KEY_ID }}
          # envkey_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_STORAGE_SECRET_ACCESS_KEY }}
          # envkey_AWS_BUCKET_DOCUMENTS_FOLDER: ${{ secrets.AWS_BUCKET_DOCUMENTS_FOLDER }}

          # DATABASE
          envkey_DATABASE_URL: ${{ secrets.UAT_DATABASE_URL }}

          # LOG
          envkey_LOG_FORMAT: 'dev'
          envkey_LOG_DIR: '../../../logs'

          # CORS
          envkey_ORIGIN: '*'

          envkey_CREDENTIALS: true

          # PORT
          envkey_PORT: 3000

      - name: Build image
        run: docker build -f ./Dockerfile.dev -t ${{ secrets.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.current-version }} .

      - name: Tag image to latest
        run: docker tag ${{ secrets.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.current-version }} ${{ secrets.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Versioned Image
        run: docker push ${{ secrets.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.current-version }}

      - name: Push Latest Tagged Image
        run: docker push ${{ secrets.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

  deploy-to-aws:
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Stop and remove old container
            sudo docker stop ${{ secrets.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest || true
            sudo docker rm ${{ secrets.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest || true

            # Remove old image
            sudo docker rmi ${{ secrets.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest || true

            # Pull new image
            sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

            # Run new container
            sudo docker run -d -p4000:3000 --name ${{ env.IMAGE_TAG }} ${{ secrets.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
